/*Header file for merge sort*/
/*------------------ Merge sort ----------------------*/

#ifndef _MERGE_SORT
#define _MERGE_SORT

/* sorts array using Merge Sort algorithm gets: array, array length, value size (for dynamic allocation), compare and assign functions.*/
void Mergesort(void* array, int length, int Size(void),int Compare(void*, void*, int, int), void Assign(void*, void*, int, int));

/*copy array to another array.
 gets: array1, array2 to be copied, length to copy, index from where to start and assign function.*/
void CopyArray(void* array1, void* array2, int length, int index, void Assign(void*, void*, int i, int j));

/* merges two arrays into one.
   gets: array, two half of the array to merge, array length 
   and compare and assign functions.*/
void Merge(void *array, void* bottom_half, void* top_half, int length,int Compare(void*, void*, int, int), void Assign(void*, void*, int, int));

#endif

/*-------------------Another File ---------------------*/
/* ------------------ Merge sort ----------------------*/
/*Code for Generic Merge Sort*/
#include <stdlib.h>
#include <stdio.h>// for malloc() and free()
#include "MergeSort.h"

// sorts array using Merge Sort algorithm
// gets: array, array length, value size (for dynamic allocation), 
// compare and assign functions.
void Mergesort(void* array, int length, int Size(void),int Compare(void*, void*, int, int), void Assign(void*, void*, int, int))
{
	  void* bottom_half; // of the array
	  void* top_half; // of the array
	
	  // stop condition: array is the length of 1
	  if (length == 1)
		  return;
	
	  // allocate memory for bottom half and top half
	  bottom_half = malloc(length/2 * Size());
	  top_half = malloc((length/2 + length%2) * Size());
	
	  // check allocations
	  if (!bottom_half || !top_half)
	  {
		    printf("Could not allocate memory");
	  }
	
	  // copy arrays
	  CopyArray(bottom_half, array, length/2, 0, Assign);
	  CopyArray(top_half, array, (length/2 + length%2), length/2, Assign);
	
	  // sort each half
	  Mergesort(bottom_half, length/2, Size, Compare, Assign);
	  Mergesort(top_half, (length/2 + length%2), Size, Compare, Assign);
	
	  // merge them
	  Merge(array, bottom_half, top_half, length, Compare, Assign);
		
	  // free allocated memory
	  free(bottom_half);
	  free(top_half);
}

// copy array to another array.
// gets: array1, array2 to be copied, length to copy, 
// index from where to start and assign function.
void CopyArray(void* array1, void* array2, int length, int index, void Assign(void*, void*, int i, int j))
{
	  int i;
	  for (i = 0; i < length; i++)
		    Assign(array1, array2, i, index+i);
}

// merges two arrays into one.
// gets: array, two half of the array to merge, array length and compare and assign functions.
void Merge(void *array, void* bottom_half, void* top_half, int length,int Compare(void*, void*, int, int), void Assign(void*, void*, int, int))
{
	int i; // index for primary array
	int bottom_i = 0, top_i = 0; // indexes for the two halfs
	
	for (i = 0; i < length; i++) // for each cell in the primary array
	{
		// compare minimal values in arrays
		  if (top_i == (length/2 + length%2) || ((bottom_i < length/2) && Compare(bottom_half, top_half, bottom_i, top_i))){
			// if bottom_i is smaller
			    Assign(array, bottom_half, i, bottom_i);
			    bottom_i++; // "erase from bottom array"
		  }
		  else{
			    // if top_i is smaller
			    Assign(array, top_half, i, top_i);
			    top_i++; // "erase from top array"
		  }
		
	 }
}


/*Another C file*/
/* Main for the Generic merge Sorting*/ 
// demostrates Mergesort, quicksort and insertion sort.

#include <stdio.h>
#include "MergeSort.h"

#define ARRAY_SIZE 20
#define LIMIT 100

int main()
{
    int array[3][ARRAY_SIZE];

    int i,j; // indexes
    
    srand(time(NULL)); // start rand
    
    printf("This program demonstrates the use of Merge sort\n");
    // create random array
    for (i = 0; i < ARRAY_SIZE; i++){
        array[0][i] = array[1][i] = array[2][i] = rand() % LIMIT;
    }
    
    printf("Random array:\n");
    for (i = 0; i < ARRAY_SIZE; i++){ // printf random array
        printf("%d ", array[0][i]);
    }
    // sort
    Mergesort(array[0], ARRAY_SIZE, IntSize, IntCompare2, IntAssign);

    for (j = 0; j < ARRAY_SIZE; j++){ // print sorted array
            printf("%d ", array[i][j]);
            printf("\n");
    }
    return 0;
}

